import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tortoise import Tortoise
from database import init_db, User, Marker
from config import TOKEN, SERVER_URL, ADMIN_ID

bot = Bot(TOKEN)
dp = Dispatcher()


class AddMarker(StatesGroup):
    waiting_location = State()
    waiting_comment = State()


class ChangeCity(StatesGroup):
    waiting_location = State()


class DeleteMarker(StatesGroup):
    waiting_marker_id = State()


def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É", callback_data="add_marker")],
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data="show_map")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É", callback_data="delete_marker")]
    ])


@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user, created = await User.get_or_create(id=message.from_user.id)

    if created or user.map_center_latitude is None:
        await state.set_state(ChangeCity.waiting_location)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())


@dp.message(F.content_type == "location", ChangeCity.waiting_location)
async def set_user_location(message: types.Message, state: FSMContext):
    user = await User.get(id=message.from_user.id)
    user.map_center_latitude = message.location.latitude
    user.map_center_longitude = message.location.longitude
    await user.save()

    await message.answer("–¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_keyboard())
    await state.clear()


@dp.callback_query(F.data == "add_marker")
async def add_marker_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddMarker.waiting_location)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Ç–∫–∏.")


@dp.message(F.content_type == "location", AddMarker.waiting_location)
async def receive_marker_location(message: types.Message, state: FSMContext):
    await state.update_data(latitude=message.location.latitude, longitude=message.location.longitude)
    await state.set_state(AddMarker.waiting_comment)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–µ—Ç–∫–µ.")


@dp.message(AddMarker.waiting_comment)
async def receive_marker_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    latitude, longitude = data["latitude"], data["longitude"]

    existing_marker = await Marker.filter(
        latitude__gte=latitude - 0.001, latitude__lte=latitude + 0.001,
        longitude__gte=longitude - 0.001, longitude__lte=longitude + 0.001
    ).first()

    if existing_marker:
        await message.answer("–í —ç—Ç–æ–º –º–µ—Å—Ç–µ —É–∂–µ –µ—Å—Ç—å –º–µ—Ç–∫–∞!")
    else:
        await Marker.create(user_id=message.from_user.id, latitude=latitude, longitude=longitude, comment=message.text)
        await message.answer("–ú–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_keyboard())

    await state.clear()


@dp.callback_query(F.data == "show_map")
async def show_map_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.answer(f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {SERVER_URL}/{user_id}.html")


@dp.callback_query(F.data == "delete_marker")
async def delete_marker_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(DeleteMarker.waiting_marker_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")


@dp.message(DeleteMarker.waiting_marker_id)
async def delete_marker(message: types.Message, state: FSMContext):
    marker_id = int(message.text)
    marker = await Marker.get_or_none(id=marker_id)

    if not marker:
        await message.answer("–ú–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        user = await User.get_or_none(id=message.from_user.id)  # Get user from DB
        if (
                user and user.is_admin) or marker.user_id == message.from_user.id or message.from_user.id == ADMIN_ID:  # Check if user is creator or admin
            await marker.delete()
            await message.answer("–ú–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_keyboard())
        else:
            await marker.delete_requests.add(user)  # –≥–¥–µ user ‚Äî –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await marker.save()
            await message.answer(
                "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ï—Å–ª–∏ 3 —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—è—Ç –∑–∞–ø—Ä–æ—Å, –º–µ—Ç–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.")

            if await marker.delete_requests.all().count() >= 3:
                await marker.delete()
                await message.answer("–ú–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ 3-—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

    await state.clear()


@dp.message(Command("change_city"))
async def change_city(message: types.Message, state: FSMContext):
    await state.set_state(ChangeCity.waiting_location)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã.")


@dp.message(Command("add_admin"))
async def add_admin(message: types.Message):
    # Check if the user is an admin
    if message.from_user.id == ADMIN_ID:
        # Split the message text to get the admin ID
        try:
            new_admin_id = int(message.text.split()[1])

            # Update the user's 'is_admin' field in the database
            user = await User.get_or_create(id=new_admin_id)
            user.is_admin = True
            await user.save()

            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except (IndexError, ValueError):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message(Command("instruction"))
async def instruction(message: types.Message):
    instruction_text = """
    –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –ø–æ—Å—Ç—ã –î–ü–° –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –í–æ—Ç –ø—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

    ---

    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
    1. –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –ø–æ—Å—Ç–∞ –î–ü–°, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –Ω–∞ –∫–∞—Ä—Ç—É.
    2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –î–ü–°.
    3. –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞).

    ---

    –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

    1. –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É:
       - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É".
       - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ Telegram (–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé ‚Üí "–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ).
       - –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –º–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç—É.

    2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É:
       - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É".
       - –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–∞—Ä—Ç—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –î–ü–°, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

    3. –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É:
       - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É".
       - –û—Ç–ø—Ä–∞–≤—å—Ç–µ id –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–µ–≥–æ –º—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –º–µ—Ç–∫–µ).
       - –ë–æ—Ç —É–¥–∞–ª–∏—Ç –º–µ—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.

    ---

    –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:
    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–æ—á–Ω—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–∞—Ä—Ç–µ.
    - –ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –º–µ—Ç–∫—É, —É–¥–∞–ª–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∫—É".
    - –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

    ---

    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöóüó∫Ô∏è
    """
    await message.answer(instruction_text)


async def main():
    await init_db()
    await dp.start_polling(bot)
    await Tortoise.close_connections()


if __name__ == "__main__":
    asyncio.run(main())
